' Gambas class file

Inherits Dibujo

Private ArrayCoord As New Point[]

Private mousefinalX As Integer
Private mousefinalY As Integer
Private paso As Integer = 5
Private ptofinal As Boolean = False
Private giroX As Integer
Private giroY As Integer
Private angulo As Integer
Private triangulo As Image
Private CreaTriangulo As New ColorearTriangulo
Private Dashes As Float[] = [5.0, 1.0, 1.0, 1.0]  'skip
Private i As Integer = 1
Private dx As Integer
Private dy As Integer

Private p1 As Point
Private p2 As Point

Public Sub _new(...)

  Dim puntoTmp As New Point

  puntoTmp.x = param[0]
  puntoTmp.y = param[1]

  ArrayCoord.Add(puntoTmp)

End

Public Sub dibuja()

  Dim a As Integer

  If Super.getTamano() = 0 Then
    Paint.LineWidth = 4
  Else
    Paint.LineWidth = Super.getTamano()
  Endif

  If Super.getColor() = 0 Or ptofinal = False Then

    Paint.LineWidth = 3
    Paint.LineCap = Paint.LineCapButt
    Paint.Dash = Dashes
    Paint.DashOffset = -5

    Paint.Brush = Paint.Color(Color.RGB(0, 0, 0))

    '  triangulo = CreaTriangulo.lee(Color.black)
  Else
    Paint.Brush = Paint.Color(Super.getColor())
    Paint.LineCap = Paint.LineCapRound
    Paint.Dash = Null
    Paint.DashOffset = 0
    triangulo = CreaTriangulo.lee(Super.getColor())

  Endif

  For a = 1 To ArrayCoord.Max - 1
    '  Paint.LineCap = Paint.LineCapRound
    Paint.MoveTo(ArrayCoord[a].x, ArrayCoord[a].y)
    Paint.LineTo(ArrayCoord[a + 1].x, ArrayCoord[a + 1].y)
    Paint.stroke
  Next

  If ptofinal = True Then
    'dibuja la flecha....

    'triangulo = triangulo.Rotate(Rad(angulo))
    'Paint.DrawImage(triangulo, girox, giroy)
    'Paint.MoveTo(p1.x, p1.y)
    Dim theta As Float = 20
    Dim long As Integer = 20
    Dim ax As Float = mousefinalx + long * Cos(Rad(angulo - 180 - theta)) 
    Dim ay As Float = mousefinaly - long * Sin(Rad(angulo - 180 - theta)) 
    Dim bx As Float = mousefinalx + long * Cos(Rad(angulo - 180 + theta))
    Dim by As Float = mousefinaly - long * Sin(Rad(angulo - 180 + theta)) 
    Paint.MoveTo(mousefinalX, mousefinalY)
    Paint.LineTo(ax, ay)
    Paint.LineTo(bx, by)
    
    'Paint.LineTo(p2.x, p2.y)

    Paint.ClosePath
    Paint.Fill(True)
    Paint.stroke
    
  Endif
  If Super.ptoControl = True Then
    Paint.DrawImage(Me.iconoMover, ArrayCoord[ArrayCoord.Max].x, ArrayCoord[ArrayCoord.Max].y)
    dx = ArrayCoord[ArrayCoord.Max].x + 16
    dy = ArrayCoord[ArrayCoord.Max].y + 16
    Paint.stroke
  Endif

End

Public Sub Add(x As Integer, y As Integer)

  Dim puntoTmp As New Point

  Dim dist As Integer

  If x < 10 And y < 10 Then Return 'corregir error de pizarra

  dist = Sqr((x - ArrayCoord[ArrayCoord.max].x) ^ 2 + (y - ArrayCoord[ArrayCoord.max].y) ^ 2)
  If dist > paso Then
    puntoTmp.x = x
    puntoTmp.y = y
    ArrayCoord.Add(puntoTmp)
  Endif

End

Public Sub Final(x As Integer, y As Integer)

  ptofinal = True

  Me.Add(x, y)
  calcularAngulosYGiro(x, y)
  'calgular angulos y

End

Public Sub calcularAngulosYGiro(x As Integer, y As Integer)

  Dim mouseestuvoX, mouseestuvoY As Integer

  mouseestuvoX = ArrayCoord[ArrayCoord.max - 1].X
  mouseestuvoY = ArrayCoord[ArrayCoord.max - 1].y
  
  mousefinalx = x
  mousefinalY = y

  If (mousefinalY - mouseestuvoY = 0) And (mousefinalX - mouseestuvoX > 0) Then 'coordenada X
    angulo = 0
    giroX = mousefinalX - 25
    giroY = mousefinalY - 20

  Else If (mousefinalY - mouseestuvoY = 0) And (mousefinalX - mouseestuvoX < 0) Then 'coordenada -X
    angulo = 180
    giroX = mousefinalX - 25
    giroY = mousefinalY - 20

  Else If (mousefinalY - mouseestuvoY > 0) And (mousefinalX - mouseestuvoX = 0) Then 'ordenada Y hacia abajo del origen
    angulo = 270
    giroX = mousefinalX - 20
    giroY = mousefinalY - 25

  Else If (mousefinalY - mouseestuvoY < 0) And (mousefinalX - mouseestuvoX = 0) Then 'ordenada Y hacia arriba del origen, en negativo
    angulo = 90
    giroX = mousefinalX - 20
    giroY = mousefinalY - 25

    'ESTO SE PUEDE HACER TAMBIÉN TOMANDO DIRECTAMENTE EL ÁNGULO
  Else If (mousefinalY - mouseestuvoY < 0) And (mousefinalX - mouseestuvoX > 0) Then 'CUADRANTE 1
    angulo = Deg(ATan((-mousefinalY + mouseestuvoY) / (mousefinalX - mouseestuvoX)))
    '  triangulo = Image.Load("triangulo.png")
    If (angulo > 85) And (angulo < 90) Then 'Pequeño ajuste por las peculiaridades del triángulo elegido
      mousefinalX = mousefinalX + 1
    Else If (angulo > 40) And (angulo < 85) Then
      mousefinalY = mousefinalY - 8
    Else If (angulo > 20) And (angulo < 40) Then
      mousefinalY = mousefinalY - 3

    Else If (angulo > 0) And (angulo < 20) Then
      'mousefinalY = mousefinalY +2
    Endif

    giroX = mousefinalX - 25
    giroY = mousefinalY - 25

  Else If (mousefinalY - mouseestuvoY < 0) And (mousefinalX - mouseestuvoX < 0) Then 'CUADRANTE 2
    angulo = Deg(ATan((-mousefinalY + mouseestuvoY) / (mousefinalX - mouseestuvoX)))
    angulo = angulo + 180

    giroX = mousefinalX - 25
    giroY = mousefinalY - 25

  Else If (mousefinalY - mouseestuvoY > 0) And (mousefinalX - mouseestuvoX < 0) Then 'CUADRANTE 3
    angulo = Deg(ATan((-mousefinalY + mouseestuvoY) / (mousefinalX - mouseestuvoX)))
    angulo = angulo + 180

    giroX = mousefinalX - 25
    giroY = mousefinalY - 25

  Else If (mousefinalY - mouseestuvoY > 0) And (mousefinalX - mouseestuvoX > 0) Then 'CUADRANTE 4
    angulo = Deg(ATan((-mousefinalY + mouseestuvoY) / (mousefinalX - mouseestuvoX)))
    giroX = mousefinalX - 25
    giroY = mousefinalY - 25

  Else If (mousefinalX - mouseestuvoX = 0) Then
    'debug "división por cero"

  Else
    angulo = Deg(ATan((-mousefinalY + mouseestuvoY) / (mousefinalX - mouseestuvoX)))
  Endif

End

'mover

Public Sub desplaza(x As Integer, y As Integer)

  Dim a As Integer
  'Dim w, h As Integer

  For a = 0 To ArrayCoord.Max

    ArrayCoord[a].x += x - dx
    ArrayCoord[a].y += y - dy
  Next
  giroX += x - dx
  giroY += y - dy

End

Public Sub getx() As Integer

  Return dx ' mouseinicioX

End

Public Sub gety() As Integer

  Return dy 'mouseinicioY

End
'---------------------------------------------
' mostrar propiedades
' ---------------------------------------------

Public Sub mostrarpropiedades()

  Dim pro As New FormCuadroPropiedades

  pro.mostrar(Me, ["Grosor_Linea", "Color_Linea|colorbutton"])

End
'----------------------------------
'propiedades editables
'----------------------------------

Property Color_Linea As Integer 'color de la linea
Property Grosor_Linea As Integer 'grosor de la linea

Private Function Color_Linea_Read() As Integer

  Return Super.getColor()

End

Private Sub Color_Linea_Write(Value As Integer)

  Super.SetColor(value)

End

Private Function Grosor_Linea_Read() As Integer

  Return Super.getTamano()

End

Private Sub Grosor_Linea_Write(Value As Integer)

  Super.Settamano(value)

End

Public Sub guardar() As String

  Dim a As Integer
  Dim contenido As String

  contenido = "dibujo|ManoAlzadaFlecha|"
  contenido &= Str$(Super.getTamano()) & "|"
  contenido &= Str$(Me.getColor()) & "|"
  contenido &= Str$(angulo) & "|"
  contenido &= Str$(giroX) & "|"
  contenido &= Str$(giroY) & "|"

  For a = 0 To ArrayCoord.Max
    contenido &= Str$(ArrayCoord[a].x) & "|"
    contenido &= Str$(ArrayCoord[a].y) & "|"
  Next
  Return contenido

End

Public Function abrir(Arraylinea As String[]) As Boolean

  Dim a As Integer
  Dim pto As Point

  If Arraylinea[1] = "ManoAlzadaFlecha" Then
    Super.Settamano(Val(Arraylinea[2]))
    Super.SetColor(Val(Arraylinea[3]))
    angulo = Val(Arraylinea[4])
    giroX = Val(Arraylinea[5])
    giroY = Val(Arraylinea[6])

    ArrayCoord.Clear()
    For a = 7 To Arraylinea.max - 1 Step 2
      pto = New Point(Arraylinea[a], Arraylinea[a + 1])
      ArrayCoord.Add(pto)
    Next
    ptofinal = True
    Return True
  Else
    Return False

  Endif

End
